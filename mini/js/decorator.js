window.totalTime=0;export function MeasureExecutionTime(t,n,e){const o=e.value;return e.value=function(...t){const e=performance.now(),r=o.apply(this,t),u=performance.now()-e;return window.totalTime+=u,console.log(`\t>>> Method - ${n} <<< >>> Executed in ${u} ms`),r},e}export function LogMethodCall(t,n,e){const o=e.value;return e.value=function(...t){console.log(`>> Method ${n} << >> Calling with arguments: ${t}`);const e=o.apply(this,t);return console.log(`>> Method - ${n} << >> Returning: ${e}`),e},e}export function Throttle(t){let n=0;return function(e,o,r){const u=r.value;return r.value=function(...e){const o=Date.now();if(o-n>=t)return n=o,u.apply(this,e)},r}}export function LogClassCreation(t){return class extends t{constructor(...n){console.log(`|| CLASS - ${t.name} || >> Created with arguments: ${n}`),super(...n)}}}export function MeasureConstructionTime(t){return class extends t{constructor(...n){const e=performance.now();super(...n);const o=performance.now()-e;window.totalTime+=o,console.log(`\t||| CLASS - ${t.name} ||| >>> Executed in ${o} ms`)}}}export function CatchErrors(t,n,e){const o=e.value;return e.value=function(...t){try{return o.apply(this,t)}catch(t){return console.error(`\t>>>!!!! ${n} !!!!<<<\n\t\tError: ${t}`),null}},e}export function Readonly(t,n){Object.defineProperty(t,n,{writable:!1,configurable:!1})}